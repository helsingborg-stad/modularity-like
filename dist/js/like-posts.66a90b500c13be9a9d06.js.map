{"version":3,"file":"js/like-posts.66a90b500c13be9a9d06.js","mappings":"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","sources":["webpack://like-posts/./source/js/front/getPosts.js","webpack://like-posts/./source/js/like-posts.js","webpack://like-posts/./source/js/front/like.js","webpack://like-posts/./source/js/front/render.js"],"sourcesContent":["class GetPosts {\r\n    constructor(RenderInstance) {\r\n        this.getPosts();\r\n        this.posts = null;\r\n        this.renderInstance = RenderInstance;\r\n    }\r\n\r\n    getPosts() {\r\n        if (!document.querySelector('[js-like-container]')) {\r\n            return;\r\n        }\r\n\r\n        if (this.posts) {\r\n            return this.renderPosts();\r\n        }\r\n\r\n        let items = this.handleEndpoints() ?? \"\";\r\n        const wantedPostTypes = this.getContainersPostTypes();\r\n\r\n        let urls = [];\r\n        if (items) {\r\n            for (const key in items) {\r\n                if (items.hasOwnProperty(key) && wantedPostTypes.includes(key)) {\r\n                    urls.push(this.getUrls(key, items[key]));\r\n                }\r\n            }\r\n        }\r\n        if (urls.length > 0) {\r\n            this.fetchPosts(urls);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    fetchPosts(urls) {\r\n        const requests = urls.map(url => fetch(url));\r\n        Promise.all(requests)\r\n            .then(responses => {\r\n                const jsonPromises = responses.map(response => response.json());\r\n                return Promise.all(jsonPromises);\r\n            })\r\n            .then(data => {\r\n                const postsArray = [].concat(...data);\r\n                this.posts = postsArray;\r\n                this.renderPosts();\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    getUrls(key, ids) {\r\n        let idString = '';\r\n            ids.forEach((id, index) => {\r\n                idString += id.id;\r\n                if (index < ids.length - 1) {\r\n                    idString += ',';\r\n                }\r\n            });\r\n        const endpoint = `https://localhost/wptest/wp-json/wp/v2/${key === 'post' ? 'posts' : key}?_embed&include=${idString}`;\r\n        return endpoint;\r\n    }\r\n\r\n    getContainersPostTypes() {\r\n        const containers = document.querySelectorAll('[js-like-container]');\r\n        let arr = [];\r\n        containers.forEach((container) => {\r\n            if (!container.hasAttribute('js-post-types')) {\r\n                return;\r\n            }\r\n            const postTypes = JSON.parse(container.getAttribute('js-post-types'));\r\n            postTypes.forEach((postType) => {\r\n                if (!arr.includes(postType)) {\r\n                    arr.push(postType);\r\n                }\r\n            });\r\n        });\r\n        \r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * sorts the array of liked posts in local storage based on their type (object parameter)\r\n     * @returns An object with the keys of the different types of posts and the values being an array\r\n     * of the posts of that type.\r\n     */\r\n    handleEndpoints() {\r\n        let posts = this.getLocalStorage();\r\n\r\n        const sortedData = posts.reduce((acc, current) => {\r\n            if (acc[current.type]) {\r\n                acc[current.type].push(current);\r\n            } else {\r\n                acc[current.type] = [current];\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n        return sortedData;\r\n    }\r\n\r\n    getLocalStorage() {\r\n        return JSON.parse(localStorage.getItem('liked-posts')) || [];\r\n    }\r\n\r\n    renderPosts() {\r\n        const updatedPosts = this.posts.map(post => {\r\n            if (post._embedded?.['wp:featuredmedia']?.[0].media_details) {\r\n                const featuredImageUrl = post._embedded['wp:featuredmedia'][0].media_details.sizes.medium;\r\n                return { ...post, image: featuredImageUrl };\r\n            }\r\n            return post;\r\n        });\r\n        \r\n        this.renderInstance.renderComponents(updatedPosts);\r\n    }\r\n}\r\n\r\nexport default GetPosts;","import GetPosts from './front/getPosts';\r\nimport Like from './front/like';\r\nimport Render from './front/render';\r\n\r\nconst LikeInstance = new Like();\r\nconst RenderInstance = new Render(likedPostsComponents, LikeInstance);\r\nconst GetPostsInstance = new GetPosts(RenderInstance);","class Like {\r\n    constructor() {\r\n        this.handleLike();\r\n    }\r\n\r\n    handleLike() {\r\n        const likeButtons = document.querySelectorAll('[data-like-icon]');\r\n\r\n        this.amountOfLikedPosts(this.getLocalStorage());\r\n        this.setLiked(this.getLocalStorage());\r\n        likeButtons && this.setListeners(likeButtons);\r\n    }\r\n\r\n    setListeners(likeButtons) {\r\n        likeButtons.forEach(button => {\r\n            button.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const postId = button.getAttribute('data-post-id');\r\n                const postType = button.getAttribute('data-post-type');\r\n                this.setLocalStorage(postId, postType);\r\n            });\r\n        });\r\n    }\r\n\r\n    getLocalStorage() {\r\n        return JSON.parse(localStorage.getItem('liked-posts')) || [];\r\n    }\r\n\r\n    setLocalStorage(postId, postType) {\r\n        let likedPostIds = this.getLocalStorage();\r\n\r\n        const index = likedPostIds.findIndex(item => item.id === postId && item.type === postType);\r\n        if (index === -1) {\r\n            likedPostIds.push({ id: postId, type: postType });\r\n        } else {\r\n            likedPostIds.splice(index, 1);\r\n        }\r\n        \r\n        localStorage.setItem('liked-posts', JSON.stringify(likedPostIds));\r\n        this.toggleLiked(postId);\r\n        this.amountOfLikedPosts(likedPostIds);\r\n    }\r\n\r\n    toggleLiked(postId) {\r\n        const icons = document.querySelectorAll(`[data-post-id=\"${postId}\"]`);\r\n        icons && icons.forEach(icon => {\r\n            icon.classList.toggle('is-liked');\r\n            this.changeIcon(icon);\r\n        })\r\n    }\r\n\r\n    setLiked(likedPosts) {\r\n        likedPosts.forEach(post => {\r\n            const icons = document.querySelectorAll(`[data-post-id=\"${post.id}\"]`);\r\n            icons && icons.forEach(icon => {\r\n                icon.classList.add('is-liked');\r\n                this.changeIcon(icon);\r\n            });\r\n        });\r\n    }\r\n\r\n    changeIcon(icon) {\r\n        if(icon.classList.contains('is-liked')) {\r\n            icon.querySelector('span').innerHTML = icon.querySelector('span').innerHTML.replace(\"_outline\", '');\r\n        } else {\r\n            icon.querySelector('span').innerHTML = icon.querySelector('span').innerHTML + \"_outline\";\r\n        }\r\n    }\r\n\r\n    amountOfLikedPosts(likedPostIds) {\r\n        const likedPostIdsAmount = document.querySelector('#liked-posts-amount');\r\n\r\n        if (!likedPostIdsAmount || !likedPostIds) {\r\n            return;\r\n        }\r\n\r\n        likedPostIdsAmount.innerHTML = likedPostIds.length;\r\n    }\r\n}\r\n\r\nexport default Like;","class Render {\r\n    constructor(likedPostsComponents, LikeInstance) {\r\n        this.components = likedPostsComponents;\r\n        this.likeInstance = LikeInstance;\r\n    }\r\n\r\n    renderComponents(posts) {\r\n        const containers = document.querySelectorAll('[js-like-container]');\r\n        if(posts && posts.length > 0 && containers) {\r\n            containers.forEach(container => {\r\n                const component = container.getAttribute('js-display-as');\r\n                const filteredPosts = this.filterPosts(posts, JSON.parse(container.getAttribute('js-post-types')));\r\n                let likeButtons = [];\r\n                filteredPosts && filteredPosts.forEach(post => {\r\n                    const childElement = document.createElement('div');\r\n                    const html = this.components[`${component}`].html.replace('{LIKE_POST_TITLE}', post.title.rendered).replace('{LIKE_POST_CONTENT}', post.excerpt.rendered).replace('{LIKE_POST_ID}', post.id).replace('{LIKE_POST_LINK}', post.link).replace('{LIKE_POST_IMAGE}', post.image ? post.image.source_url : '').replace('{LIKE_POST_TYPE}', post.type); \r\n                    childElement.innerHTML = html;\r\n                    container.appendChild(childElement);\r\n                    likeButtons.push(childElement.querySelector('[data-like-icon]'));\r\n                    childElement.classList.add('u-position--relative');\r\n                });\r\n                this.likeInstance.setListeners(likeButtons);\r\n            })\r\n        }\r\n    }\r\n\r\n    filterPosts(posts, postTypes) {\r\n        const filteredPosts = posts.filter(post => postTypes.includes(post.type));\r\n        return filteredPosts;\r\n    }\r\n}\r\nexport default Render;"],"names":["LikeInstance","constructor","this","handleLike","likeButtons","document","querySelectorAll","amountOfLikedPosts","getLocalStorage","setLiked","setListeners","forEach","button","addEventListener","e","preventDefault","postId","getAttribute","postType","setLocalStorage","JSON","parse","localStorage","getItem","likedPostIds","index","findIndex","item","id","type","push","splice","setItem","stringify","toggleLiked","icons","icon","classList","toggle","changeIcon","likedPosts","post","add","contains","querySelector","innerHTML","replace","likedPostIdsAmount","length","RenderInstance","getPosts","posts","renderInstance","renderPosts","items","handleEndpoints","wantedPostTypes","getContainersPostTypes","urls","key","hasOwnProperty","includes","getUrls","fetchPosts","requests","map","url","fetch","Promise","all","then","responses","jsonPromises","response","json","data","postsArray","concat","catch","error","console","log","ids","idString","containers","arr","container","hasAttribute","reduce","acc","current","updatedPosts","_embedded","media_details","featuredImageUrl","sizes","medium","image","renderComponents","likedPostsComponents","components","likeInstance","component","filteredPosts","filterPosts","childElement","createElement","html","title","rendered","excerpt","link","source_url","appendChild","postTypes","filter"],"sourceRoot":""}