{"version":3,"file":"js/like-posts.242bae8b09483a21f4ae.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,mEAAmE,+BAA+B,kBAAkB,SAAS;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;;;;;ACtHvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4BAA4B;AAC5D,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,OAAO;AACzE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sEAAsE,QAAQ;AAC9E;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI;;;;;;;;;;;;;;AChFnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,UAAU,kBAAkB,gBAAgB,kCAAkC,kBAAkB,oCAAoC,aAAa,sBAAsB,eAAe,wBAAwB,gBAAgB,sDAAsD,eAAe;AACvV;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM;;;;;;UC/BrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNwC;AACR;AACI;AACpC;AACA,yBAAyB,mDAAI;AAC7B,2BAA2B,qDAAM;AACjC,6BAA6B,uDAAQ,iB","sources":["webpack://like-posts/./source/js/front/getPosts.js","webpack://like-posts/./source/js/front/like.js","webpack://like-posts/./source/js/front/render.js","webpack://like-posts/webpack/bootstrap","webpack://like-posts/webpack/runtime/define property getters","webpack://like-posts/webpack/runtime/hasOwnProperty shorthand","webpack://like-posts/webpack/runtime/make namespace object","webpack://like-posts/./source/js/like-posts.js"],"sourcesContent":["class GetPosts {\r\n    constructor(RenderInstance) {\r\n        this.getPosts();\r\n        this.posts = null;\r\n        this.renderInstance = RenderInstance;\r\n    }\r\n\r\n    getPosts() {\r\n        if (!document.querySelector('[js-like-container]')) {\r\n            return;\r\n        }\r\n\r\n        if (this.posts) {\r\n            return this.renderPosts();\r\n        }\r\n\r\n        let items = this.handleEndpoints() ?? \"\";\r\n        const wantedPostTypes = this.getContainersPostTypes();\r\n\r\n        let urls = [];\r\n        if (items) {\r\n            for (const key in items) {\r\n                if (items.hasOwnProperty(key) && wantedPostTypes.includes(key)) {\r\n                    urls.push(this.getUrls(key, items[key]));\r\n                }\r\n            }\r\n        }\r\n        if (urls.length > 0) {\r\n            this.fetchPosts(urls);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    fetchPosts(urls) {\r\n        const requests = urls.map(url => fetch(url));\r\n        Promise.all(requests)\r\n            .then(responses => {\r\n                const jsonPromises = responses.map(response => response.json());\r\n                return Promise.all(jsonPromises);\r\n            })\r\n            .then(data => {\r\n                const postsArray = [].concat(...data);\r\n                this.posts = postsArray;\r\n                this.renderPosts();\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    getUrls(key, ids) {\r\n        let idString = '';\r\n            ids.forEach((id, index) => {\r\n                idString += id.id;\r\n                if (index < ids.length - 1) {\r\n                    idString += ',';\r\n                }\r\n            });\r\n        const endpoint = `https://localhost/wptest/wp-json/wp/v2/${key === 'post' ? 'posts' : key}?_embed&include=${idString}`;\r\n        return endpoint;\r\n    }\r\n\r\n    getContainersPostTypes() {\r\n        const containers = document.querySelectorAll('[js-like-container]');\r\n        let arr = [];\r\n        containers.forEach((container) => {\r\n            if (!container.hasAttribute('js-post-types')) {\r\n                return;\r\n            }\r\n            const postTypes = JSON.parse(container.getAttribute('js-post-types'));\r\n            postTypes.forEach((postType) => {\r\n                if (!arr.includes(postType)) {\r\n                    arr.push(postType);\r\n                }\r\n            });\r\n        });\r\n        \r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * sorts the array of liked posts in local storage based on their type (object parameter)\r\n     * @returns An object with the keys of the different types of posts and the values being an array\r\n     * of the posts of that type.\r\n     */\r\n    handleEndpoints() {\r\n        let posts = this.getLocalStorage();\r\n\r\n        const sortedData = posts.reduce((acc, current) => {\r\n            if (acc[current.type]) {\r\n                acc[current.type].push(current);\r\n            } else {\r\n                acc[current.type] = [current];\r\n            }\r\n            return acc;\r\n        }, {});\r\n\r\n        return sortedData;\r\n    }\r\n\r\n    getLocalStorage() {\r\n        return JSON.parse(localStorage.getItem('liked-posts')) || [];\r\n    }\r\n\r\n    renderPosts() {\r\n        const updatedPosts = this.posts.map(post => {\r\n            if (post._embedded?.['wp:featuredmedia']?.[0].media_details) {\r\n                const featuredImageUrl = post._embedded['wp:featuredmedia'][0].media_details.sizes.medium;\r\n                return { ...post, image: featuredImageUrl };\r\n            }\r\n            return post;\r\n        });\r\n        \r\n        this.renderInstance.renderComponents(updatedPosts);\r\n    }\r\n}\r\n\r\nexport default GetPosts;","class Like {\r\n    constructor() {\r\n        this.handleLike();\r\n    }\r\n\r\n    handleLike() {\r\n        const likeButtons = document.querySelectorAll('[data-like-icon]');\r\n\r\n        this.amountOfLikedPosts(this.getLocalStorage());\r\n        this.setLiked(this.getLocalStorage());\r\n        likeButtons && this.setListeners(likeButtons);\r\n    }\r\n\r\n    setListeners(likeButtons) {\r\n        likeButtons.forEach(button => {\r\n            button.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const postId = button.getAttribute('data-post-id');\r\n                const postType = button.getAttribute('data-post-type');\r\n                this.setLocalStorage(postId, postType);\r\n            });\r\n        });\r\n    }\r\n\r\n    getLocalStorage() {\r\n        return JSON.parse(localStorage.getItem('liked-posts')) || [];\r\n    }\r\n\r\n    setLocalStorage(postId, postType) {\r\n        let likedPostIds = this.getLocalStorage();\r\n\r\n        const index = likedPostIds.findIndex(item => item.id === postId && item.type === postType);\r\n        if (index === -1) {\r\n            likedPostIds.push({ id: postId, type: postType });\r\n        } else {\r\n            likedPostIds.splice(index, 1);\r\n        }\r\n        \r\n        localStorage.setItem('liked-posts', JSON.stringify(likedPostIds));\r\n        this.toggleLiked(postId);\r\n        this.amountOfLikedPosts(likedPostIds);\r\n    }\r\n\r\n    toggleLiked(postId) {\r\n        const icons = document.querySelectorAll(`[data-post-id=\"${postId}\"]`);\r\n        icons && icons.forEach(icon => {\r\n            icon.classList.toggle('is-liked');\r\n            this.changeIcon(icon);\r\n        })\r\n    }\r\n\r\n    setLiked(likedPosts) {\r\n        likedPosts.forEach(post => {\r\n            const icons = document.querySelectorAll(`[data-post-id=\"${post.id}\"]`);\r\n            icons && icons.forEach(icon => {\r\n                icon.classList.add('is-liked');\r\n                this.changeIcon(icon);\r\n            });\r\n        });\r\n    }\r\n\r\n    changeIcon(icon) {\r\n        if(icon.classList.contains('is-liked')) {\r\n            icon.querySelector('span').innerHTML = icon.querySelector('span').innerHTML.replace(\"_outline\", '');\r\n        } else {\r\n            icon.querySelector('span').innerHTML = icon.querySelector('span').innerHTML + \"_outline\";\r\n        }\r\n    }\r\n\r\n    amountOfLikedPosts(likedPostIds) {\r\n        const likedPostIdsAmount = document.querySelector('#liked-posts-amount');\r\n\r\n        if (!likedPostIdsAmount || !likedPostIds) {\r\n            return;\r\n        }\r\n\r\n        likedPostIdsAmount.innerHTML = likedPostIds.length;\r\n    }\r\n}\r\n\r\nexport default Like;","class Render {\r\n    constructor(likedPostsComponents, LikeInstance) {\r\n        this.components = likedPostsComponents;\r\n        this.likeInstance = LikeInstance;\r\n    }\r\n\r\n    renderComponents(posts) {\r\n        const containers = document.querySelectorAll('[js-like-container]');\r\n        if(posts && posts.length > 0 && containers) {\r\n            containers.forEach(container => {\r\n                const component = container.getAttribute('js-display-as');\r\n                const filteredPosts = this.filterPosts(posts, JSON.parse(container.getAttribute('js-post-types')));\r\n                let likeButtons = [];\r\n                filteredPosts && filteredPosts.forEach(post => {\r\n                    const childElement = document.createElement('div');\r\n                    const html = this.components[`${component}`].html.replace('{LIKE_POST_TITLE}', post.title.rendered).replace('{LIKE_POST_CONTENT}', post.excerpt.rendered).replace('{LIKE_POST_ID}', post.id).replace('{LIKE_POST_LINK}', post.link).replace('{LIKE_POST_IMAGE}', post.image ? post.image.source_url : '').replace('{LIKE_POST_TYPE}', post.type); \r\n                    childElement.innerHTML = html;\r\n                    container.appendChild(childElement);\r\n                    likeButtons.push(childElement.querySelector('[data-like-icon]'));\r\n                    childElement.classList.add('u-position--relative');\r\n                });\r\n                this.likeInstance.setListeners(likeButtons);\r\n            })\r\n        }\r\n    }\r\n\r\n    filterPosts(posts, postTypes) {\r\n        const filteredPosts = posts.filter(post => postTypes.includes(post.type));\r\n        return filteredPosts;\r\n    }\r\n}\r\nexport default Render;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import GetPosts from './front/getPosts';\r\nimport Like from './front/like';\r\nimport Render from './front/render';\r\n\r\nconst LikeInstance = new Like();\r\nconst RenderInstance = new Render(likedPostsComponents, LikeInstance);\r\nconst GetPostsInstance = new GetPosts(RenderInstance);"],"names":[],"sourceRoot":""}