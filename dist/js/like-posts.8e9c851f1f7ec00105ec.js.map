{"version":3,"file":"js/like-posts.8e9c851f1f7ec00105ec.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,sBAAsB,QAAQ,iBAAiB,+BAA+B,kBAAkB,SAAS;;AAEzG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG,IAAI;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;AClIxB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,4BAA4B;AACnD,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D,OAAO;AACnE;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA,6DAA6D,QAAQ;AACrE;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;UC5GpB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNwC;AACR;AACI;;AAEpC,yBAAyB,mDAAI;AAC7B,2BAA2B,qDAAM;AACjC,6BAA6B,uDAAQ","sources":["webpack://like-posts/./source/js/front/getPosts.js","webpack://like-posts/./source/js/front/like.js","webpack://like-posts/webpack/bootstrap","webpack://like-posts/webpack/runtime/define property getters","webpack://like-posts/webpack/runtime/hasOwnProperty shorthand","webpack://like-posts/webpack/runtime/make namespace object","webpack://like-posts/./source/js/like-posts.js"],"sourcesContent":["class GetPosts {\n\tconstructor(RenderInstance, LikeInstance) {\n\t\tthis.renderInstance = RenderInstance;\n\t\tthis.likeInstance = LikeInstance;\n\t\tthis.getPosts();\n\t\tthis.posts = null;\n\t}\n\n\tgetPosts() {\n\t\tif (!document.querySelector('[js-like-container]')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.posts) {\n\t\t\treturn this.renderPosts();\n\t\t}\n\n\t\t// Get the liked posts from the GET-parameter (if it is set)\n\t\tlet items = {};\n\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\tconst encodedLikedPosts = urlParams.get('liked-posts');\n\t\tif (encodedLikedPosts) {\n\t\t\tconst likedPosts = this.likeInstance.decodeLikedPosts(encodedLikedPosts);\n\t\t\titems = this.handleEndpoints(likedPosts) ?? '';\n\t\t} else {\n\t\t\titems = this.handleEndpoints() ?? '';\n\t\t}\n\n\t\tconst wantedPostTypes = this.getContainersPostTypes();\n\n\t\tlet urls = [];\n\t\tif (items) {\n\t\t\tfor (const key in items) {\n\t\t\t\tif (items.hasOwnProperty(key) && wantedPostTypes.includes(key)) {\n\t\t\t\t\turls.push(this.getUrls(key, items[key]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (urls.length > 0) {\n\t\t\tthis.fetchPosts(urls);\n\t\t} else {\n\t\t\tthis.renderInstance.renderComponents(false);\n\t\t}\n\t}\n\n\tfetchPosts(urls) {\n\t\tconst requests = urls.map((url) => fetch(url));\n\t\tPromise.all(requests)\n\t\t\t.then((responses) => {\n\t\t\t\tconst jsonPromises = responses.map((response) => response.json());\n\t\t\t\treturn Promise.all(jsonPromises);\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tconst postsArray = [].concat(...data);\n\t\t\t\tthis.posts = postsArray;\n\t\t\t\tthis.renderPosts();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t}\n\n\tgetUrls(key, ids) {\n\t\tlet idString = '';\n\t\tids.forEach((id, index) => {\n\t\t\tidString += id.id;\n\t\t\tif (index < ids.length - 1) {\n\t\t\t\tidString += ',';\n\t\t\t}\n\t\t});\n\t\tconst endpoint = `${pageUrl}/wp-json/wp/v2/${key === 'post' ? 'posts' : key}?_embed&include=${idString}`;\n\n\t\treturn endpoint;\n\t}\n\n\tgetContainersPostTypes() {\n\t\tconst containers = document.querySelectorAll('[js-like-container]');\n\t\tlet arr = [];\n\t\tcontainers.forEach((container) => {\n\t\t\tif (!container.hasAttribute('js-post-types')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst postTypes = JSON.parse(container.getAttribute('js-post-types'));\n\t\t\tpostTypes.forEach((postType) => {\n\t\t\t\tif (!arr.includes(postType)) {\n\t\t\t\t\tarr.push(postType);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn arr;\n\t}\n\n\t/**\n\t * sorts the array of liked posts in local storage based on their type (object parameter)\n\t * @returns An object with the keys of the different types of posts and the values being an array\n\t * of the posts of that type.\n\t */\n\thandleEndpoints() {\n\t\tlet posts = this.getLocalStorage();\n\n\t\tconst sortedData = posts.reduce((acc, current) => {\n\t\t\tif (acc[current.type]) {\n\t\t\t\tacc[current.type].push(current);\n\t\t\t} else {\n\t\t\t\tacc[current.type] = [current];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {});\n\n\t\treturn sortedData;\n\t}\n\n\tgetLocalStorage() {\n\t\treturn JSON.parse(localStorage.getItem('liked-posts')) || [];\n\t}\n\n\trenderPosts() {\n\t\tconst updatedPosts = this.posts.map((post) => {\n\t\t\tif (post._embedded?.['wp:featuredmedia']?.[0].media_details) {\n\t\t\t\tconst featuredImageUrl = post._embedded['wp:featuredmedia'][0].media_details.sizes.medium;\n\t\t\t\treturn { ...post, image: featuredImageUrl };\n\t\t\t}\n\t\t\treturn post;\n\t\t});\n\n\t\tthis.renderInstance.renderComponents(updatedPosts);\n\t}\n}\n\nexport default GetPosts;\n","class Like {\n\tconstructor() {\n\t\tthis.handleLike();\n\t}\n\n\thandleLike() {\n\t\tconst likeButtons = document.querySelectorAll('[data-like-icon]');\n\n\t\tthis.amountOfLikedPosts(this.getLocalStorage());\n\t\tthis.setLiked(this.getLocalStorage());\n\t\tlikeButtons && this.setListeners(likeButtons);\n\t}\n\n\tsetListeners(likeButtons) {\n\t\tlikeButtons.forEach((button) => {\n\t\t\tbutton.addEventListener('click', (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tconst postId = button.getAttribute('data-post-id');\n\t\t\t\tconst postType = button.getAttribute('data-post-type');\n\t\t\t\tthis.setLocalStorage(postId, postType);\n\t\t\t});\n\t\t});\n\t}\n\n\tgetLocalStorage() {\n\t\treturn JSON.parse(localStorage.getItem('liked-posts')) || [];\n\t}\n\n\tsetLocalStorage(postId, postType) {\n\t\tlet likedPostIds = this.getLocalStorage();\n\n\t\tconst index = likedPostIds.findIndex((item) => item.id === postId && item.type === postType);\n\t\tif (index === -1) {\n\t\t\tlikedPostIds.push({ id: postId, type: postType });\n\t\t} else {\n\t\t\tlikedPostIds.splice(index, 1);\n\t\t}\n\n\t\tlocalStorage.setItem('liked-posts', JSON.stringify(likedPostIds));\n\t\tthis.toggleLiked(postId);\n\t\tthis.amountOfLikedPosts(likedPostIds);\n\t}\n\n\ttoggleLiked(postId) {\n\t\tconst icons = document.querySelectorAll(`[data-post-id=\"${postId}\"]`);\n\t\ticons &&\n\t\t\ticons.forEach((icon) => {\n\t\t\t\ticon.classList.toggle('is-liked');\n\t\t\t\tthis.changeIcon(icon);\n\t\t\t});\n\t}\n\n\tsetLiked(likedPosts) {\n\t\tlikedPosts.forEach((post) => {\n\t\t\tconst icons = document.querySelectorAll(`[data-post-id=\"${post.id}\"]`);\n\t\t\ticons &&\n\t\t\t\ticons.forEach((icon) => {\n\t\t\t\t\ticon.classList.add('is-liked');\n\t\t\t\t\tthis.changeIcon(icon);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tchangeIcon(icon) {\n\t\tif (icon.classList.contains('is-liked')) {\n\t\t\ticon.querySelector('span').innerHTML = icon.querySelector('span').innerHTML.replace('_outline', '');\n\t\t} else {\n\t\t\ticon.querySelector('span').innerHTML = icon.querySelector('span').innerHTML + '_outline';\n\t\t}\n\t}\n\n\tamountOfLikedPosts(likedPostIds) {\n\t\tconst likedPostIdsAmount = document.querySelector('#liked-posts-amount');\n\n\t\tif (!likedPostIdsAmount || !likedPostIds) {\n\t\t\treturn;\n\t\t}\n\n\t\tlikedPostIdsAmount.innerHTML = likedPostIds.length;\n\t}\n\n\tgenerateEncodedLikedPostsParam() {\n\t\t// Retrieve the favorited posts from localStorage\n\t\tconst likedPosts = JSON.parse(localStorage.getItem('liked-posts')) || [];\n\n\t\tif (likedPosts.length == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Encrypt the likedPosts data using Base64 encoding\n\t\tconst encodedLikedPosts = btoa(JSON.stringify(likedPosts));\n\n\t\t// Return the encrypted likedPosts data as the query parameter liked-posts\n\t\treturn '?liked-posts=' + encodedLikedPosts;\n\t}\n\n\tdecodeLikedPosts(encodedLikedPosts) {\n\t\t// Decode the encoded liked posts data from Base64\n\t\tvar decodedLikedPosts = atob(encodedLikedPosts);\n\n\t\t// Parse the decoded liked posts data into a JavaScript object\n\t\tvar likedPosts = JSON.parse(decodedLikedPosts);\n\n\t\t// Return the JavaScript object of liked posts\n\t\treturn likedPosts;\n\t}\n}\n\nexport default Like;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import GetPosts from './front/getPosts';\nimport Like from './front/like';\nimport Render from './front/render';\n\nconst LikeInstance = new Like();\nconst RenderInstance = new Render(likedPostsComponents, LikeInstance);\nconst GetPostsInstance = new GetPosts(RenderInstance, LikeInstance);\n"],"names":[],"sourceRoot":""}